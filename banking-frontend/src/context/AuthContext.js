// import { createContext, useContext, useState, useEffect } from "react";

// const AuthContext = createContext();

// export const AuthProvider = ({ children }) => {
//   const [token, setToken] = useState(localStorage.getItem("token"));
//   const [role, setRole] = useState(localStorage.getItem("role"));

//   // Khi t·∫£i trang, ki·ªÉm tra n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p th√¨ c·∫≠p nh·∫≠t state
//   useEffect(() => {
//     setToken(localStorage.getItem("token"));
//     setRole(localStorage.getItem("role"));
//   }, []);

//   // H√†m ƒëƒÉng nh·∫≠p (L∆∞u token & role v√†o localStorage)
//   const login = (newToken, newRole) => {
//     localStorage.setItem("token", newToken);
//     localStorage.setItem("role", newRole);
//     setToken(newToken);
//     setRole(newRole);
//   };

//   // H√†m ƒëƒÉng xu·∫•t (X√≥a token & role kh·ªèi localStorage)
//   const logout = () => {
//     localStorage.removeItem("token");
//     localStorage.removeItem("role");
//     setToken(null);
//     setRole(null);
//   };

//   return (
//     <AuthContext.Provider value={{ token, role, login, logout }}>
//       {children}
//     </AuthContext.Provider>
//   );
// };

// // Hook ƒë·ªÉ s·ª≠ d·ª•ng AuthContext d·ªÖ d√†ng h∆°n
// export const useAuth = () => useContext(AuthContext);
import { createContext, useContext, useState, useEffect } from "react";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [token, setToken] = useState(localStorage.getItem("token"));
  const [role, setRole] = useState(localStorage.getItem("role"));

  // üî• Ki·ªÉm tra token khi t·∫£i trang
  useEffect(() => {
    if (token) {
      try {
        const tokenData = JSON.parse(atob(token.split(".")[1])); // Gi·∫£i m√£ JWT
        const expTime = tokenData.exp * 1000; // Chuy·ªÉn gi√¢y sang mili gi√¢y

        if (Date.now() >= expTime) {
          logout(); // üî¥ Token h·∫øt h·∫°n ‚Üí Logout
        }
      } catch (error) {
        console.error("Token kh√¥ng h·ª£p l·ªá:", error);
        logout(); // üî¥ Token l·ªói ‚Üí Logout
      }
    }
  }, [token]);

  // ‚úÖ H√†m ƒëƒÉng nh·∫≠p
  const login = (newToken, newRole) => {
    localStorage.setItem("token", newToken);
    localStorage.setItem("role", newRole);
    setToken(newToken);
    setRole(newRole);
  };

  // üî¥ H√†m ƒëƒÉng xu·∫•t
  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    setToken(null);
    setRole(null);
    window.location.href = "/login"; // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
  };

  return (
    <AuthContext.Provider value={{ token, role, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Hook ƒë·ªÉ s·ª≠ d·ª•ng AuthContext
export const useAuth = () => useContext(AuthContext);
